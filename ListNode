#include <iostream>
#include <ctime>

using namespace std;

typedef struct ListNode
{
	int key;
	char character;
	double number;
	ListNode *next;
};

class List
{
public:

	List()
	{
		inf.head = inf.tail = NULL;
		inf.counter = 0;
	}

	void insert(int key, int quantityMode = false)
	{
		ListNode* q = new ListNode;
		q->key = key;
		q->character = 'T';
		q->number = rand() % 100;
		inf.counter++;
		if (inf.head == NULL)
		{
			inf.head = inf.tail = q;
			q->next = NULL;
		}
		else
		{
			ListNode* before = NULL, * after = inf.head;
			while(after != NULL)
			{
				if (after->key == key)
				{
					if (quantityMode == false) 
					{
						cout << "Klucz o podanej wartosci znajduje sie juz w liscie." << endl;
					}
					inf.counter--;
					return;
				}

				if (after->key >= key)
					break;
				else
				{
					before = after;
					after = after->next;
				}
			}
			if (before == NULL)
			{
				inf.head = q;
				q->next = after;
			}
			else
			{
				if (after == NULL)
				{
					inf.tail->next = q;
					q->next = NULL;
					inf.tail = q;
				}
				else
				{
					before->next = q;
					q->next = after;
				}
			}
		}
	}

	void insertQuantity(int number)
	{
		int meta_cnt = getCounter() + number;
		while(meta_cnt != getCounter())
		{
			int random = (rand() * rand()) % 99900 + 99;
			insert(random, true);
		}
	}


	int search(int key)
	{
		ListNode* q = inf.head;
		while (q != NULL)
		{
			if (q->key == key)
			{
				cout << "Element znajduje sie na liscie" << endl;
				return 1;
			}
			else
			{
				q = q->next;
			}
			cout << "Element nie znajduje sie na liscie" << endl;
			return 0;

		}

	}

	void remove(int key)
	{
		if (search(key))
		{
			ListNode* q = inf.head;
			while ((q->next)->key != key)
			{
				q = q->next;
			}
			q->next = (q->next)->next;
		}
		else
		{
			cout << "Lista nie zawiera elementu o podanej wartosci" << endl;
		}
	}

	void show()
	{
		ListNode* q = inf.head;
		if (inf.head == NULL)
		{
			cout << "Lista jest pusta." << endl;
		}
		else
		{
			while(q != NULL)
			{
				cout << q->key << " " << q->character << " " << q->number << endl;
				q = q->next;
			}
		}
	}

	void showFirst(int number)
	{
		int counter = number;
		ListNode* q = inf.head;
		if (inf.head == NULL)
		{
			cout << "Lista jest pusta." << endl;
		}
		else
		{
			while (q != NULL && number)
			{
				cout << q->key << " " << q->character << " " << q->number << endl;
				q = q->next;
				number--;
			}
		}
	}

	void showLast(int number);

	int getCounter()
	{
		return inf.counter;
	}
	/*int getCounter()
	{
		int cnt = 0;
		ListNode* q = inf.head;
		while (q != NULL)
		{
			cnt++;
			q = q->next;
		}
		return cnt;
	}*/

	void clear();

private:
	typedef struct
	{
		ListNode* head;
		ListNode* tail;
		int counter;
	}Info;

	Info inf;
	
};

int main()
{
	srand(time(NULL));
	List a1;
	a1.insertQuantity(10094);
	a1.insert(11);
	a1.insert(11);
	a1.showFirst(10000);
	cout << a1.getCounter();
	return 0;
}
