#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

typedef struct ListNode
{
	int key;
	char character;
	double number;
	ListNode *next;
};

class List
{
public:

	List()
	{
		inf.head = inf.tail = NULL;
		inf.counter = 0;
	}

	void insert(int key, int quantityMode = false)
	{
		ListNode* q = new ListNode;
		q->key = key;
		q->character = 'T';
		q->number = rand() % 100;
		inf.counter++;
		if (inf.head == NULL)
		{
			inf.head = inf.tail = q;
			q->next = NULL;
		}
		else
		{
			ListNode* before = NULL, * after = inf.head;
			while(after != NULL)
			{
				if (after->key == key)
				{
					if (quantityMode == false) 
					{
						cout << "Klucz o podanej wartosci znajduje sie juz w liscie." << endl;
					}
					inf.counter--;
					return;
				}

				if (after->key >= key)
					break;
				else
				{
					before = after;
					after = after->next;
				}
			}
			if (before == NULL)
			{
				inf.head = q;
				q->next = after;
			}
			else
			{
				if (after == NULL)
				{
					inf.tail->next = q;
					q->next = NULL;
					inf.tail = q;
				}
				else
				{
					before->next = q;
					q->next = after;
				}
			}
		}
	}

	void insertQuantity(int number)
	{
		int meta_cnt = getCounter() + number;
		while(meta_cnt != getCounter())
		{
			int random = (rand() * rand()) % 99900 + 99;
			insert(random, true);
		}
	}


	int search(int key, bool removeMode = false)
	{
		ListNode* q = inf.head;
		while (q != NULL)
		{
			if (q->key == key)
			{
				if (removeMode == false)
				{
					cout << "Element znajduje sie na liscie" << endl;
				}
				return 1;
			}
			q = q->next;
		}
		cout << "Element nie znajduje sie na liscie: "<< key << endl;
		return 0;
	}

	void remove(int key)
	{
		ListNode* q = inf.head, * before = NULL;
		while (search(key, true)) {
			if (q->key == key)
			{
				inf.head = q->next;
				delete q;
				inf.counter--;
				return;
			}
			while (q->key != key)
			{
				before = q;
				q = q->next;
			}
			before->next = q->next;
			delete q;
			inf.counter--;
			return;
		}
	}

	void show()
	{
		ListNode* q = inf.head;
		if (inf.head == NULL)
		{
			cout << "Lista jest pusta." << endl;
		}
		else
		{
			while(q != NULL)
			{
				cout << q->key << " " << q->character << " " << q->number << endl;
				q = q->next;
			}
		}
	}

	void showFirst(int number)
	{
		int counter = number;
		ListNode* q = inf.head;
		if (inf.head == NULL)
		{
			cout << "Lista jest pusta." << endl;
		}
		else
		{
			while (q != NULL && number)
			{
				cout << q->key << " " << q->character << " " << q->number << endl;
				q = q->next;
				number--;
			}
		}
		cout << endl;
	}

	void showLast(int number)
	{
		int meta_counter = getCounter() - number;
		ListNode* q = inf.head;
		if (inf.head == NULL)
		{
			cout << "Lista jest pusta." << endl;
		}
		else
		{
			for (int i = 0; i < meta_counter; i++)
			{
				q = q->next;
			}
			while (q != 0)
			{
				cout << q->key << " " << q->character << " " << q->number << endl;
				q = q->next;
			}
		}
		cout << endl;
	}

	int getCounter()
	{
		return inf.counter;
	}

	void showCounter()
	{
		cout << "Liczba wezow w liscie: " << getCounter() << endl;
	}

	void clear()
	{
		ListNode* q = inf.head, * after;
		if (inf.head == NULL)
		{
			cout << "Lista jest pusta." << endl;
		}
		else
		{
			while(q != 0)
			{
				after = q->next;
				remove(q->key);
				q = after;
			}
		}
	}

private:
	typedef struct
	{
		ListNode* head;
		ListNode* tail;
		int counter;
	}Info;

	Info inf;
	
};

int main()
{
	int X;
	int k1, k2, k3, k4, k5;
	clock_t begin, end;
	double time_spent;
	#pragma warning(disable : 4996)
	FILE* fp = fopen("inlab02.txt", "r"); 
	if (fp == NULL)
	{
		return -1;
	}
	fscanf(fp, "%d %d %d %d %d %d", &X, &k1, &k2, &k3, &k4, &k5); 
	fclose(fp);

	srand(time(NULL));

	begin = clock();

	List a1;

	a1.search(k1);
	a1.insertQuantity(X);
	a1.showCounter();
	a1.showFirst(20);

	a1.insert(k2);
	a1.showFirst(20);

	a1.insert(k3);
	a1.showFirst(20);

	a1.insert(k4);
	a1.showFirst(20);

	a1.insert(k5);
	a1.remove(k3);
	a1.showFirst(20);

	a1.remove(k2);
	a1.showFirst(20);

	a1.remove(k5);
	a1.showCounter();

	a1.search(k5);
	a1.showLast(11);
	a1.showCounter();

	a1.clear();

	end = clock();
	time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
	cout << time_spent << endl;

	return 0;
}
